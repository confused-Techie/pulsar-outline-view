// The ui-variables file is provided by base themes provided by Atom.
//
// See https://github.com/atom/atom-dark-ui/blob/master/styles/ui-variables.less
// for a full listing of what's available.
@import "ui-variables";
@import "syntax-variables";

.hbox () {
  display: flex;
  flex-direction: row;
}

@indent-level: 1rem;

@line-height: @font-size * 1.2;

.outline-view {

  .icon::before {
    font-size: @font-size;
  }

  font-size: @font-size;
  font-weight: 400;
  color: @text-color;
  background-color: @tree-view-background-color;
  contain: size;
  overflow: auto;
  -webkit-user-select: none;

  &.with-ellipsis-strategy {
    ul.outline-list-root.outline-list {
      min-width: unset;
    }

    .name {
      max-width: calc(100% - @font-size);
    }

    .name-inner {
      text-overflow: ellipsis;
      white-space: nowrap;
      overflow: hidden;
    }
  }

  ul.background-message {
    padding-top: 50px;
    text-align: center;
  }

  ul.outline-list-root.outline-list {
    isolation: isolate;
    position: relative;
    min-width: min-content;
    // Imitate what's built into tree-view.
    padding: 0 10px 0 5px;
  }

  ul.outline-list {
    list-style-type: none;
    padding: 0;
  }

  .outline-list.hidden {
    display: none;
  }

  .name {
    position: relative;
    .hbox();
    align-items: center;

    &::before {
      flex: none;
      position: relative;
      top: -1px;
      text-align: center;
      margin-right: 5px;
    }
  }

  .name-inner {
    display: block;
    max-width: 100%;
  }

  .outline-view-option.list-item {
    .hbox();
    align-items: center;

    &::before {
      flex: none;
    }
  }

  .make-type-icon(attribute, @syntax-color-attribute);
  .make-type-icon(builtin, @syntax-color-keyword);
  .make-type-icon(class, @syntax-color-class);
  .make-type-icon(constant, @syntax-color-constant);
  .make-type-icon(function, @syntax-color-function);
  .make-type-icon(import, @syntax-color-import);
  .make-type-icon(keyword, @syntax-color-keyword);
  .make-type-icon(method, @syntax-color-method);
  .make-type-icon(module, @syntax-color-import);
  .make-type-icon(mixin, @syntax-color-class);
  .make-type-icon(package, @syntax-color-import);
  .make-type-icon(property, @syntax-color-property);
  .make-type-icon(require, @syntax-color-import);
  .make-type-icon(snippet, @syntax-color-snippet);
  .make-type-icon(tag, @syntax-color-tag);
  .make-type-icon(type, @syntax-color-class);
  .make-type-icon(value, @syntax-color-value);
  .make-type-icon(variable, @syntax-color-variable);
  .make-type-icon(selector, @syntax-color-attribute);
  .make-type-icon(pseudo-selector, @syntax-color-attribute);
}

.make-type-icon(@type, @color) {
  .icon.@{type} {
    color: @color;
    background: fadeout(@color, 80%)
  }
}
.make-type-icon(@type, @color)
  when (hsvvalue(@color) - hsvvalue(@overlay-background-color) > -20)
  and (hsvvalue(@color) - hsvvalue(@overlay-background-color) < 20) {
  .icon.@{type} {
    @corrected-color: contrast(@overlay-background-color, darken(@color, 30%), lighten(@color, 30%));
    color: @corrected-color;
    background: fadeout(@corrected-color, 80%);
  }
}
